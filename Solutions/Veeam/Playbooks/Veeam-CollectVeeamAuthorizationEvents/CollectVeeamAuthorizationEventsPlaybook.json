{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "title": "Veeam-CollectVeeamAuthorizationEvents",
    "description": "A Sentinel playbook that automatically collects Veeam authorization events from VBR servers on a schedule. Retrieves VBR settings from watchlist and calls the GetAllAuthorizationEventsAsync function for each enabled server.",
    "prerequisites": [
      "1. Microsoft Sentinel workspace configured",
      "2. Permission to create Logic Apps and API Connections",
      "3. Permission to assign roles to the Resource Group",
      "4. Azure Function App deployed for Veeam integration with GetAllAuthorizationEventsAsync function",
      "5. VBR Settings watchlist configured in Sentinel",
      "6. Managed Identity permissions configured for the Logic App"
    ],
    "entities": [],
    "tags": [ "Automation", "Veeam", "Authorization", "Collection" ],
    "lastUpdateTime": "2025-08-25T00:00:00.000Z",
    "support": {
      "tier": "community"
    },
    "author": {
      "name": "Custom Template"
    },
    "parameterTemplateVersion": "1.0.0",
    "postDeployment": [
      "1. Assign Sentinel Contributor role to the Logic App identity on the Microsoft Sentinel workspace",
      "2. Assign Website Contributor role to the Logic App identity on the Function App resource",
      "3. Ensure VBR Settings watchlist is properly configured with isCollectingAuthorizationEvents flag"
    ]
  },
  "parameters": {
    "PlaybookName": {
      "defaultValue": "Veeam-CollectVeeamAuthorizationEvents",
      "type": "string",
      "metadata": {
        "description": "Name of the playbook (Logic App) to be created"
      }
    },
    "AzureSentinelConnectionName": {
      "defaultValue": "azuresentinel-connection",
      "type": "string",
      "metadata": {
        "description": "The name to use for the Microsoft Sentinel Connector in the Logic App (This will exist as an API Connection in your subscription)"
      }
    },
    "functionAppName": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Name of the Azure Function App for Veeam integration"
      }
    },
    "workspaceId": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace ID (GUID) of the Log Analytics workspace that contains Microsoft Sentinel"
      }
    },
    "resourceGroupName": {
      "defaultValue": "[resourceGroup().name]",
      "type": "string",
      "metadata": {
        "description": "Name of the resource group containing the Microsoft Sentinel workspace"
      }
    }
  },
  "variables": {
    "functionAppId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('AzureSentinelConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "displayName": "[parameters('AzureSentinelConnectionName')]",
        "customParameterValues": {},
        "api": {
          "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
        },
        "parameterValueType": "Alternative"
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('PlaybookName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "hidden-SentinelTemplateName": "Veeam-CollectVeeamAuthorizationEvents",
        "hidden-SentinelTemplateVersion": "1.0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]"
      ],
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            },
            "functionAppName": {
              "defaultValue": "[parameters('functionAppName')]",
              "type": "String"
            },
            "workspaceId": {
              "defaultValue": "[parameters('workspaceId')]",
              "type": "String"
            },
            "resourceGroupName": {
              "defaultValue": "[parameters('resourceGroupName')]",
              "type": "String"
            },
            "subscriptionId": {
              "defaultValue": "[subscription().subscriptionId]",
              "type": "String"
            },
            "VbrHostName": {
              "defaultValue": "vbr1",
              "type": "String"
            }
          },
          "triggers": {
            "Every_24_hours": {
              "recurrence": {
                "interval": 24,
                "frequency": "Hour"
              },
              "evaluatedRecurrence": {
                "interval": 24,
                "frequency": "Hour"
              },
              "type": "Recurrence"
            }
          },
          "actions": {
            "Watchlists_-_Get_VBR_Settings": {
              "runAfter": {},
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azuresentinel']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/Watchlists/subscriptions/@{encodeURIComponent(parameters('subscriptionId'))}/resourceGroups/@{encodeURIComponent(parameters('resourceGroupName'))}/workspaces/@{encodeURIComponent(parameters('workspaceId'))}/watchlists/@{encodeURIComponent('vbr_settings')}/watchlistItems"
              }
            },            "Parse_VBR_settings": {
              "runAfter": {
                "Watchlists_-_Get_VBR_Settings": [
                  "Succeeded"
                ]
              },
              "type": "ParseJson",
              "inputs": {
                "content": "@body('Watchlists_-_Get_VBR_Settings')",
                "schema": {
                  "type": "object",
                  "properties": {
                    "properties": {
                      "type": "object",
                      "properties": {                        "watchlistItems": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "properties.itemsKeyValue": {
                                "type": "object",
                                "properties": {
                                  "VbrServerName": {
                                    "type": "string"
                                  },
                                  "baseUrl": {
                                    "type": "string"
                                  },
                                  "isCollectingAuthEvents": {
                                    "type": "string"
                                  },
                                  "keyVaultPasswordId": {
                                    "type": "string"
                                  },
                                  "keyVaultUsernameId": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "For_each_VBR": {
              "foreach": "@body('Parse_VBR_settings')?['properties']?['watchlistItems']",
              "actions": {
                "Parse_current_VBR": {
                  "type": "ParseJson",
                  "inputs": {
                    "content": "@items('For_each_VBR')",
                    "schema": {
                      "type": "object",
                      "properties": {                        "properties.itemsKeyValue": {
                          "type": "object",
                          "properties": {
                            "VbrServerName": {
                              "type": "string"
                            },
                            "baseUrl": {
                              "type": "string"
                            },
                            "isCollectingAuthEvents": {
                              "type": "string"
                            },
                            "keyVaultPasswordId": {
                              "type": "string"
                            },
                            "keyVaultUsernameId": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "If_authorization_events_collection_is_enabled": {
                  "actions": {
                    "Collect_Authorization_Events_into_VeeamAuthorizationEventsTable_CL": {
                      "type": "Function",
                      "inputs": {
                        "queries": {
                          "vbrHostName": "@body('Parse_current_VBR')?['properties.itemsKeyValue']?['VbrServerName']"
                        },
                        "function": {
                          "id": "[concat(variables('functionAppId'), '/functions/GetAllAuthorizationEventsAsync')]"
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Parse_current_VBR": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Print_baseUrl": {
                        "type": "Compose",
                        "inputs": "@body('Parse_current_VBR')?['properties.itemsKeyValue']?['baseUrl']"
                      }
                    }
                  },                  "expression": {
                    "and": [
                      {
                        "equals": [
                          "@body('Parse_current_VBR')?['properties.itemsKeyValue']?['isCollectingAuthEvents']",
                          "true"
                        ]
                      }
                    ]
                  },
                  "type": "If"
                }
              },              "runAfter": {
                "Parse_VBR_settings": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azuresentinel": {
                "connectionName": "[parameters('AzureSentinelConnectionName')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('AzureSentinelConnectionName'))]",
                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azuresentinel')]",
                "connectionProperties": {
                  "authentication": {
                    "type": "ManagedServiceIdentity"
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}
