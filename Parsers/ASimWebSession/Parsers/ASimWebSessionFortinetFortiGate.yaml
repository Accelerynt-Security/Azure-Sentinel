Parser:
  Title: Web Session ASIM parser for Fortinet FortiGate
  Version: '0.1.1'
  LastUpdated: Apr 23, 2025
Product:
  Name: Fortinet FortiGate
Normalization:
  Schema: WebSession
  Version: '0.2.6'
References:
- Title: ASIM Web Session Schema
  Link: https://aka.ms/ASimWebSessionDoc
- Title: ASIM
  Link: https://aka.ms/AboutASIM
- Title: web log fields
  Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/400992  
- Title: Fortinet FortiGate CEF setup
  Link: https://community.fortinet.com/t5/FortiGate/Technical-Tip-Integrate-FortiGate-with-Microsoft-Sentinel/ta-p/199709
- Title: Fortinet FortiGate syslogd documentation
  Link: https://docs.fortinet.com/document/fortigate/7.2.0/cli-reference/450620/config-log-syslogd-setting
- Title: Fortinet FortiGate extended logging for user agent, http method and x-forwarded-for
  Link: https://docs.fortinet.com/document/fortigate/7.4.0/fortios-log-message-reference/496081/enabling-extended-logging
Description: |
  This ASIM parser supports filtering and normalizing Fortinet FortiGate logs produced by the Microsoft Sentinel Fortinet connector to the ASIM Web Session normalized schema.
ParserName: ASimWebSessionFortinetFortiGate
EquivalentBuiltInParser: _ASim_WebSession_FortinetFortiGate
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let EventLookup=datatable(DeviceAction:string,DvcAction:string,EventResult:string)
  [
    "passthrough","Allow","Success"
    , "blocked","Deny","Failure"
  ];
  // -- See https://docs.fortinet.com/document/fortigate/7.2.4/fortios-log-message-reference/671442/cef-priority-levels
  let SeverityLookup = datatable (EventOriginalSeverity:string, EventSeverity:string)
  [
    "1", "Informational", // Debug
    "2", "Informational", // Information
    "3", "Informational", // Notification
    "4", "Low", // Warning
    "5", "Low", // Error
    "6", "High", // Critical
    "7", "Medium", // Alert
    "8", "High" // Emergency
  ];
  let parser=(disabled:bool=false){
    CommonSecurityLog
    | where not(disabled)
    | where DeviceVendor  == "Fortinet" 
        and DeviceProduct startswith "Fortigate"
        and Activity has_all ('webfilter', 'utm') or Activity has_all ('ips', 'utm')
    | extend
        EventProduct = "FortiGate"
    | lookup EventLookup on DeviceAction 
    | project Activity,AdditionalExtensions,DestinationIP,DestinationPort,DeviceAction,DeviceInboundInterface,DeviceOutboundInterface,DeviceProduct,DeviceVersion,LogSeverity,Protocol,ReceivedBytes,SentBytes,SourceIP,SourcePort,TimeGenerated, DeviceExternalID, Type, _ItemId, Computer, EventResult, DvcAction, RequestURL, RequestContext, DestinationHostName, SourceHostName, SourceUserName, DestinationUserName
    | project-rename 
      Url                     = RequestURL
      , UrlCategory           = RequestContext
      , DstBytes              = ReceivedBytes
      , DstInterfaceName      = DeviceOutboundInterface
      , DstIpAddr             = DestinationIP
      , DstPortNumber         = DestinationPort
      , DvcHostname           = Computer
      , EventMessage          = Activity
      , EventOriginalSeverity = LogSeverity
      , EventProduct          = DeviceProduct
      , EventProductVersion   = DeviceVersion
      , SrcBytes              = SentBytes
      , SrcInterfaceName      = DeviceInboundInterface
      , SrcIpAddr             = SourceIP
      , SrcPortNumber         = SourcePort
      , DvcId                 = DeviceExternalID
      , EventUid              = _ItemId
      , DstHostname           = DestinationHostName
      , SrcHostname           = SourceHostName
      , SrcUsername           = SourceUserName
      , DstUsername           = DestinationUserName
    | invoke _ASIM_ResolveNetworkProtocol ('Protocol')
    | extend 
        DstUsernameType = _ASIM_GetUsernameType(DstUsername),
        SrcUsernameType = _ASIM_GetUsernameType(SrcUsername)
    | project-rename DvcOriginalAction = DeviceAction
    | parse-kv AdditionalExtensions as (
          start:datetime,
          srcintfrole:string,
          dstintfrole:string,
          externalID:string,
          policyid:int,
          dstcountry:string,
          srccountry:string,
          crscore:string,
          duration:int,
          sentpkt:long,
          rcvdpkt:long,
          ['ad.referralurl']:string,
          ['ad.httpmethod']:string,
          ['ad.agent']:string,
          deviceSeverity:string,
          ref:string,
          msg:string,
          profile:string,
          incidentserialno:string,
          policytype:string,
          attack:string,
          attackid:string,
          logid:string,
          direction:string,
          subtype:string,
          severity: string,
          vd:string,
          FTNTFGTattack:string,
          FTNTFGTattackid:string,
          FTNTFGTlogid:string,
          FTNTFGTsubtype:string,
          FTNTFGTvd:string,
          FTNTFGTstart:datetime,
          FTNTFGTsrcintfrole:string,
          FTNTFGTdstintfrole:string,
          FTNTFGTexternalID:string,
          FTNTFGTpolicyid:int,
          FTNTFGTdstcountry:string,
          FTNTFGTsrccountry:string,
          FTNTFGTcrscore:string,
          FTNTFGTduration:int,
          FTNTFGTsentpkt:long,
          FTNTFGTrcvdpkt:long
      ) with (pair_delimiter=';', kv_delimiter='=')
    | parse AdditionalExtensions with * "x-forwarded-for=" HttpRequestXff:string ";" *
    | project-rename 
      HttpReferrer              =  ['ad.referralurl'],
      HttpRequestMethod         = ['ad.httpmethod'],
      HttpUserAgent             = ['ad.agent'],
      t1ThreatName              = attack,
      t1ThreatId                = attackid,
      t1EventOriginalUid        = logid,
      t1EventOriginalSubType    = subtype,
      t1EventStartTime          = start,
      t1SrcZone                 = srcintfrole,
      t1DstZone                 = dstintfrole,
      t1NetworkSessionId        = externalID,
      t1RuleNumber              = policyid,
      t1NetworkDuration         = duration,
      t1DstGeoCountry           = dstcountry,
      t1SrcGeoCountry           = srccountry,
      t1ThreatOriginalRiskLevel = crscore,
      t1SrcPackets              = sentpkt,
      t1DstPackets              = rcvdpkt,
      t2ThreatName              = FTNTFGTattack,
      t2ThreatId                = FTNTFGTattackid,
      t2EventOriginalUid        = FTNTFGTlogid,
      t2EventOriginalSubType    = FTNTFGTsubtype,
      t2EventStartTime          = FTNTFGTstart,
      t2SrcZone                 = FTNTFGTsrcintfrole,
      t2DstZone                 = FTNTFGTdstintfrole,
      t2NetworkSessionId        = FTNTFGTexternalID,
      t2RuleNumber              = FTNTFGTpolicyid,
      t2NetworkDuration         = FTNTFGTduration,
      t2DstGeoCountry           = FTNTFGTdstcountry,
      t2SrcGeoCountry           = FTNTFGTsrccountry,
      t2ThreatOriginalRiskLevel = FTNTFGTcrscore,
      t2SrcPackets              = FTNTFGTsentpkt,
      t2DstPackets              = FTNTFGTrcvdpkt
    | extend EventStartTime = coalesce(t1EventStartTime,t2EventStartTime),
           SrcZone = coalesce(t1SrcZone,t2SrcZone),
           DstZone = coalesce(t1DstZone,t2DstZone),
           NetworkSessionId = coalesce(t1NetworkSessionId,t2NetworkSessionId),
           RuleNumber = coalesce(t1RuleNumber,t2RuleNumber),
           NetworkDuration = coalesce(t1NetworkDuration,t2NetworkDuration),
           DstGeoCountry = coalesce(t1DstGeoCountry,t2DstGeoCountry),
           SrcGeoCountry = coalesce(t1SrcGeoCountry,t2SrcGeoCountry),
           ThreatOriginalRiskLevel = coalesce(t1ThreatOriginalRiskLevel,t2ThreatOriginalRiskLevel),
           SrcPackets = coalesce(t1SrcPackets,t2SrcPackets),
           DstPackets = coalesce(t1DstPackets,t2DstPackets),
           EventOriginalSubType = coalesce(t1EventOriginalSubType,t2EventOriginalSubType),
           EventOriginalUid = coalesce(t1EventOriginalUid,t2EventOriginalUid),
           ThreatName = coalesce(t1ThreatName,t2ThreatName),
           ThreatId=coalesce(t1ThreatId,t2ThreatId)
     | project-away t1SrcZone,t2SrcZone, t1DstZone,t2DstZone, t1NetworkSessionId,t2NetworkSessionId,t1RuleNumber,t2RuleNumber,   t1NetworkDuration,t2NetworkDuration, t1DstGeoCountry,t2DstGeoCountry, t1SrcGeoCountry,t2SrcGeoCountry, t1ThreatOriginalRiskLevel,t2ThreatOriginalRiskLevel, t1SrcPackets,t2SrcPackets, t1DstPackets,t2DstPackets, t1EventStartTime, t2EventStartTime, vd, t1EventOriginalSubType,t2EventOriginalSubType, t1EventOriginalUid,t2EventOriginalUid, FTNTFGTvd, t1ThreatName,t2ThreatName, t1ThreatId,t2ThreatId
    | parse AdditionalExtensions with * "Method=" temp_HttpRequestMethod "|User-Agent=" temp_HttpUserAgent ";" *
    | extend 
        HttpRequestMethod = coalesce(temp_HttpRequestMethod,HttpRequestMethod),
        HttpUserAgent = coalesce(temp_HttpUserAgent,HttpUserAgent)
    | project-away temp_*
    | extend AdditionalFields_ips =  bag_pack(
                                "incidentserialno",incidentserialno, 
                                "policytype",policytype,
                                "profile",profile,
                                "ref",ref,
                                "Message",msg,
                                "deviceSeverity", deviceSeverity,
                                "direction", direction)
    | extend 
      EventCount               = int(1)
      , EventSchema            = "WebSession"
      , EventSchemaVersion     = "0.2.6"
      , EventType              = "HTTPsession"
      , EventVendor            = "Fortinet"
      , DvcIdType              = "Other"
      , NetworkBytes           = DstBytes + SrcBytes
      , EventEndTime           = TimeGenerated
      , EventStartTime         = coalesce(EventStartTime, TimeGenerated)
      , NetworkProtocolVersion = case(DstIpAddr contains ".", "IPv4"
          , DstIpAddr contains ":", "IPv6"
          , "")
      , NetworkPackets         = DstPackets + SrcPackets
      , UserAgent              = HttpUserAgent
      , Dvc                    = DvcHostname
      , User                   = SrcUsername
      , Hostname               = DstHostname
    | lookup SeverityLookup on EventOriginalSeverity
    | extend EventSeverity = iff(EventMessage has_all ('ips', 'utm'), severity, EventSeverity)
    | extend 
        Src       = SrcIpAddr,
        Dst       = DstIpAddr,
        SessionId = NetworkSessionId,
        IpAddr    = SrcIpAddr,
        Duration  = NetworkDuration,
        Rule      = tostring(RuleNumber)
    | project-away Protocol, AdditionalExtensions, NetworkProtocolNumber, severity, incidentserialno, policytype, profile, ref, msg, deviceSeverity, direction
  };
  parser (disabled=disabled)