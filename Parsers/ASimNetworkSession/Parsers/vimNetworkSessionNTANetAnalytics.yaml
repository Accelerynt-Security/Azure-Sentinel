Parser:
  Title: TODO
  Version: '0.1'
  LastUpdated: Sept 17 2023
Product:
  Name: Azure NTANetAnalytics
Normalization:
  Schema: NetworkSession
  Version: '0.2.6'
References:
- Title: ASIM Network Session Schema
  Link: https://aka.ms/ASimNetworkSessionDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filters and normalizing the native Microsoft Sentinel Network Session table (ASimNetworkSessionLogs) to the ASIM NetworkSession normalized schema. While the native table is ASIM compliant, the parser is needed to add capabilities, such as aliases, available only at query time. 
ParserName: vimNetworkSessionNative
EquivalentBuiltInParser: _Im_NetworkSession_Native
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: srcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: ipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dstportnumber
    Type: int
    Default: int(null)
  - Name: hostname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: dvcaction
    Type: dynamic
    Default: dynamic([])
  - Name: eventresult
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let parser = (
    disabled: bool = false,
    starttime: datetime = datetime(null),
    endtime: datetime = datetime(null),
    srcipaddr_has_any_prefix: dynamic = dynamic([]),
    dstipaddr_has_any_prefix: dynamic = dynamic([]),
    ipaddr_has_any_prefix: dynamic = dynamic([]),
    dstportnumber: int = int(null),
    hostname_has_any: dynamic = dynamic([]),
    dvcaction: dynamic = dynamic([]),
    eventresult: string = "*"
  ) {
  // Pre-filter: Check if parser is disabled
  let src_or_any=set_union(srcipaddr_has_any_prefix, ipaddr_has_any_prefix); 
  let dst_or_any=set_union(dstipaddr_has_any_prefix, ipaddr_has_any_prefix);
  let DvcActionLookup=datatable(FlowStatus:string, DvcAction:string, EventResult: string, EventSeverity: string)
  [
      "Allowed", "Allow", "Success", "Informational",
      "Denied", "Deny", "Failure", "Low",
  ];
  let ProtocolLookup=datatable(L4Protocol:string, NetworkProtocol:string)
  [
      "T", "TCP",
      "U", "UDP",
      "TCP", "TCP",
      "UDP", "UDP",
      "ICMP", "ICMP",
  ];
  NTANetAnalytics
  | where not(disabled)
  // Pre-filter Time
  | where isnull(starttime) or FlowStartTime >= starttime
  | where isnull(endtime) or FlowStartTime <= endtime
  // Pre-filter FlowLogs in source schema
  | where SubType == "FlowLog" and isnotempty(FlowStartTime) and isnotempty(FlowEndTime)
  // Pre-filter IPs
  | where array_length(src_or_any) == 0 or has_any_ipv4_prefix(SrcIp, src_or_any)
  | where array_length(dst_or_any) == 0 or has_any_ipv4_prefix(DestIp, dst_or_any)
  | extend temp_SrcMatch = has_any_ipv4_prefix(SrcIp, src_or_any), temp_DstMatch = has_any_ipv4_prefix(DestIp, dst_or_any)
  | extend ASimMatchingIpAddr = case(
    array_length(src_or_any) == 0 and array_length(dst_or_any) == 0 ,"-",
    temp_SrcMatch and temp_DstMatch, "Both",
    temp_SrcMatch, "SrcIpAddr",
    temp_DstMatch, "DstIpAddr",
    "No match"
  )
  | where ASimMatchingIpAddr != "No match"
  // Pre-filter DST Port Number
  | where isnull(dstportnumber) or DestPort == dstportnumber
  // Pre-filter DvcAction
  | lookup DvcActionLookup on FlowStatus
  | where array_length(dvcaction) == 0 or DvcAction has_any (dvcaction)
  // Pre-filter Event result
  | where eventresult == "*" or (eventresult == "Success" and EventResult == "Allowed") or (eventresult == "Failure" and EventResult == "Denied")
  | extend SrcPortNumber = toint(split(SrcPorts, "|")[0])
  | lookup ProtocolLookup on L4Protocol
  | extend
      EventCount = case(CompletedFlows != 0, CompletedFlows, 0),
      EventType = "Flow",
      EventSchema = "NetworkSession",
      EventSchemaVersion = "0.2.6",
      // eventresultdetails (recommended)
      EventProduct = "Azure NSG flows", // check this
      EventVendor = "Microsoft",
      Dvc = "TrafficAnalytics" // check this
  // Rename existing columns
  | project-rename
      EventStartTime = FlowStartTime,
      EventEndTime = FlowEndTime,
      SrcIpAddr = SrcIp,
      DstIpAddr = DestIp,
      DstPortNumber = DestPort,
      SrcBytes = BytesSrcToDest,
      DstBytes = BytesDestToSrc,
      SrcPackets = PacketsSrcToDest,
      DstPackets = PacketsDestToSrc,
      SrcGeoCountry = Country,
      NetworkDirection = FlowDirection,
      SrcSubscriptionId = SrcSubscription,
      DstSubscriptionId = DestSubscription,
      DstRegion = DestRegion,
      EventUid = _ItemId,
      NetworkRuleName = AclRule,
      SrcInterfaceGuid = SrcNic,
      DstInterfaceGuid = DestNic
  // Map other values
  | extend 
      DstHostname = DstIpAddr,
      NetworkApplicationProtocol = toupper(L7Protocol),
      Src = SrcIpAddr,
      Dst = DstIpAddr,
      DstDvcScopeId = DstSubscriptionId,
      DstDvcScope = DstSubscriptionId,
      SrcDvcScopeId = SrcSubscriptionId,
      SrcDvcScope = SrcSubscriptionId,
      DstDvcId = case(NetworkDirection == "Inbound", TargetResourceId, ""),
      DstDvcIdType = case(NetworkDirection == "Inbound", "AzureResourceId", ""),
      SrcDvcId = case(NetworkDirection == "Outbound", TargetResourceId, ""),
      SrcDvcIdType = case(NetworkDirection == "Outbound", "AzureResourceId", ""),
      DstMacAddr = case(NetworkDirection == "Inbound", MacAddress, ""),
      SrcMacAddr = case(NetworkDirection == "Outbound", MacAddress, "")
  // Alias
  | extend
      Hostname = DstHostname,
      IpAddr = SrcIpAddr
  | project 
      EventStartTime,
      EventEndTime,
      SrcIpAddr,
      DstIpAddr,
      DstPortNumber,
      NetworkDirection,
      SrcSubscriptionId,
      DstSubscriptionId,
      DstDvcScopeId = DstSubscriptionId,
      DstDvcScope = DstSubscriptionId,
      SrcDvcScopeId = SrcSubscriptionId,
      SrcDvcScope = SrcSubscriptionId,
      SrcRegion,
      DstRegion,
      SrcInterfaceGuid,
      DstInterfaceGuid,
      SrcGeoCountry,
      DstPackets,
      SrcPackets,
      DstBytes,
      SrcBytes,
      NetworkRuleName,
      Type,
      EventUid,
      ASimMatchingIpAddr,
      DvcAction,
      EventResult,
      EventSeverity,
      SrcPortNumber,
      NetworkProtocol,
      EventCount,
      EventType,
      EventSchemaVersion,
      EventProduct,
      EventVendor,
      Dvc,
      DstHostname,
      NetworkApplicationProtocol,
      Src,
      Dst,
      DstMacAddr,
      SrcMacAddr,
      Hostname,
      IpAddr,
      DstDvcId,
      DstDvcIdType,
      SrcDvcId,
      SrcDvcIdType
  };
  parser (
      starttime=starttime, 
      endtime=endtime, 
      srcipaddr_has_any_prefix=srcipaddr_has_any_prefix, 
      dstipaddr_has_any_prefix=dstipaddr_has_any_prefix, 
      ipaddr_has_any_prefix=ipaddr_has_any_prefix, 
      dstportnumber=dstportnumber, 
      hostname_has_any=hostname_has_any, 
      dvcaction=dvcaction,
      eventresult=eventresult,
      disabled=disabled
  )